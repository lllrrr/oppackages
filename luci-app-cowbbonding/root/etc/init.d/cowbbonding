#!/bin/bash /etc/rc.common
# wulishui 20200216->20210413
# Author: wulishui <wulishui@gmail.com> , all rights reserved.

START=95
USE_PROCD=1
reload="$1"

flush_arp() {
  ip link set arp off dev "$interface"
  ip link set arp on dev "$interface"
# ip neigh flush dev "$interface"
}

flush_dhcp() {
  [ "$reload" = "reload" ] && return
  sum=`grep -c 'config host' /etc/config/dhcp`
  for i in $(seq 1 $sum)
  do
   uci del dhcp.@host[]
  done
  uci commit dhcp
}

config_host() {
[ "$reload" = "reload" ] && return
[ -n "$hostid" -a "$E3" == 0 ] && hostid_ok="$hostid" || hostid_ok=""
[ -n "$duid" -a "$E4" == 0 ] && duid_ok="$duid" || duid_ok=""
cat>>/tmp/cowbbonding/dhcp<<EOF
config host
	option name '$name'
	option dns '1'
	option mac '$MAC'
	option ip '$IP'
	option leasetime '$leasetime'
	option hostid '$hostid_ok'
	option duid '$duid_ok'

EOF
echo "#$MAC#$IP#$hostid#$duid#"|sed 's/ //g'|sed 's/[#][#]*/#/g' >> /tmp/cowbbonding/list.added
unset hostid_ok ; unset duid_ok
}

config_arp() {
   ip neigh add $IP lladdr $MAC nud permanent dev $interface 2>/dev/null
   [ "$arphold" == 1 ] || return
   [ "$whitelistenabled" != 1 ] && { arptables -w -A cowbbonding -i ${interface} -s ${IP} --source-mac ! ${MAC} -j DROP >/dev/null 2>&1 ; arptables -w -A cowbbonding -i ${interface} --source-mac ${MAC} -s ! ${IP} -j DROP >/dev/null 2>&1 ; }
   [ "$whitelistenabled" == 1 ] && arptables -w -A cowbbonding -i ${interface} -s ${IP} --source-mac ${MAC} -j RETURN >/dev/null 2>&1
}

mac_ip_err() {
    [ -n "$MAC" -o -n "$IP" ] || return
    E1=`egrep -c -o "#$MAC#" /tmp/cowbbonding/list.added` 
    E2=`egrep -c -o "#$IP#" /tmp/cowbbonding/list.added` 
    [ -z "$MAC" ] && EXT=" <------MAC错误！" && ERRMAC=1
    [ -z "$IP" ] && EXT=" <------IP错误！" && ERRIP=1
    line=`echo $line |sed 's/^#//g'|sed 's/#$//g'|sed 's/#/   /g'`
    [ "$E1" == 0 ] && echo "$line $EXT" >> /tmp/cowbbonding/list.cfg_
    unset EXT
}

chk_list() {
    E1=`egrep -c -o "#$MAC#" /tmp/cowbbonding/list.added` 
    E2=`egrep -c -o "#$IP#" /tmp/cowbbonding/list.added` 
    E3=`egrep -c -o "#$hostid#" /tmp/cowbbonding/list.added` 
    E4=`egrep -c -o "#$duid#" /tmp/cowbbonding/list.added` 
    if [ "$E1" == 0 -a "$E2" == 0 ]; then
     BND=$((BND+1))
     [ "$whitelistenabled" == 1 ] && iptables -w -t nat -A cowbbonding -m mac --mac-source $MAC -s $IP -j RETURN 2>/dev/null
     [ "$work_mode" == "1" -o "$work_mode" == "2" ] && config_host
     [ "$work_mode" == "2" -o "$work_mode" == "3" ] && config_arp
    fi
    [ -n "$hostid" ] && hostid=":$hostid"
    [ "$E1" -gt 0 ] && REPmac=$((REPmac+1)) ## EXT=" <------MAC存在重复！"
    [ "$E2" -gt 0 ] && REPip=$((REPip+1)) && EXT=" <------IP存在重复！"
    [ "$E3" -gt 0 ] && EXT1=" <------IPV6后缀存在重复！"
    [ "$E4" -gt 0 ] && EXT2=" <------DUID存在重复！"
    [ -n "$ename" ] && EXT3=" <------hostname格式错误！" && name="$ename"
    [ "$E1" == 0 ] && echo "$MAC $IP $hostid $duid $name $EXT $EXT1 $EXT2 $EXT3" >> /tmp/cowbbonding/list.cfg_
    unset EXT ; unset EXT1 ; unset EXT2 ; unset EXT3
}

smart_mode() {
 REPmac=0 ; REPip=0 ; BND=0
 LST=`cat /tmp/cowbbonding/list.cfg | sed 's/[\t ][\t ]*/ /g' | sed 's/^[ ]//g' | grep -v '^[!/#]' | sed '/^\s*$/d' | tee /tmp/cowbbonding/list.cfg_org |sed 's/\r//g'|sed 's/ /#/g'|sed 's/^/#/g'|sed 's/$/#/g'`
 while read line
 do
     duid=`echo $line |sed 's/-//g'|egrep -o "#([A-Fa-f0-9]{28})#" |sed 's/#//g'|head -1`
   hostid=`echo $line |egrep -o "#(:[A-Fa-f0-9]{1,4})#" |sed 's/://g'|sed 's/#//g'|head -1`
      MAC=`echo $line |egrep -o "#([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}#"|sed 's/#//g'|tr '[a-z]' '[A-Z]'|sed 's/-/:/g'|head -1`
       IP=`echo $line |egrep -o "#(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])#"|sed 's/#//g'|head -1`
     name=`echo $line |egrep -o "#[a-zA-Z]#|#[a-zA-Z][0-9a-zA-Z._-]*[0-9a-zA-Z]#"|sed 's/#//g'|head -1`
   [ -z "$name" ] && ename=`echo $line |sed 's/#/\n/g'|grep -v ':'| egrep -v "([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}" |egrep "(^[a-zA-Z])"|egrep "([a-zA-Z0-9]$)"|head -1`
   [ -n "$MAC" -a -n "$IP" ] && chk_list
   [ -z "$MAC" -o -z "$IP" ] && mac_ip_err
   unset ename
 done <<< "$LST"
}

manual_add() {
sum=`grep -c 'config manual' /etc/config/cowbbonding`
[ "$sum" -gt 0 ] || return
 for i in $(seq 0 $(expr $sum - 1))
 do
  MAC=`uci get cowbbonding.@manual[$i].MAC 2>/dev/null`
  IP=`uci get cowbbonding.@manual[$i].IP 2>/dev/null`
  hostname=`uci get cowbbonding.@manual[$i].hostname 2>/dev/null`
  duid=`uci get cowbbonding.@manual[$i].duid 2>/dev/null`
  hostid=`uci get cowbbonding.@manual[$i].hostid 2>/dev/null` ; [ -n "$hostid" ] && hostid=`echo ":"$hostid""|sed 's/::/:/g'` || hostid=" "
  [ -n "$MAC" -a -n "$IP" ] && echo ""$MAC" "$IP" "$hostid" "$duid" "$hostname"" >> /tmp/cowbbonding/list.cfg
  uci del cowbbonding.@manual[]
 done
 echo "" >> /tmp/cowbbonding/list.cfg
 uci add cowbbonding manual
 uci commit cowbbonding
}

pre_arphold() {
  [ "$arphold" == 1 ] || return
  [ "$work_mode" == "2" -o "$work_mode" == "3" ] || return
  arptables -w -N cowbbonding 2>/dev/null
  arptables -w -I INPUT -j cowbbonding 2>/dev/null
 [ "$whitelistenabled" != 1 ] && { arptables -w -A cowbbonding -i ${interface} -s ${lanipaddr} --source-mac ! ${lanmacaddr} -j DROP >/dev/null 2>&1 ; arptables -w -A cowbbonding -i ${interface} --source-mac ${lanmacaddr} -s ! ${lanipaddr} -j DROP >/dev/null 2>&1 ; }
 [ "$whitelistenabled" == 1 ] && arptables -w -A cowbbonding -i ${interface} --source-mac ${lanmacaddr} -s ${lanipaddr} -j RETURN >/dev/null 2>&1
}

pre_white() {
  [ "$whitelistenabled" == 1 ] || return
  iptables -w -t nat -N cowbbonding 2>/dev/null
  iptables -w -t nat -C PREROUTING -j cowbbonding 2>/dev/null || iptables -w -t nat -I PREROUTING -j cowbbonding 2>/dev/null
  iptables -w -t nat -A cowbbonding -m mac --mac-source ${lanmacaddr} -s ${lanipaddr} -j RETURN 2>/dev/null
}

guest_network() {
 [ "$whitelistenabled" == 1 ] || return
 [ -f /etc/config/guestnetwork/guest_del ] || return
 interface_name=$(uci get guest-network.@guest-network[0].interface_name 2>/dev/null) || interface_name=guest
 iptables -t nat -A cowbbonding -i br-${interface_name} -j RETURN
 [ "$work_mode" == "2" -o "$work_mode" == "3" ] || return
 arptables -A cowbbonding -i br-${interface_name} -j RETURN >/dev/null 2>&1
}

post_white() {
  [ "$whitelistenabled" == 1 ] || return
  localip=`uci get network.lan.ipaddr  2>/dev/null|awk -F '.' '{print $1"."$2"."$3".0/24"}'`
  iptables -w -t nat -A cowbbonding -s $localip -d $localip -j RETURN
  iptables -w -t nat -A cowbbonding -d 224.0.0.0/4 -j RETURN
  iptables -w -t nat -A cowbbonding -d 240.0.0.0/4 -j RETURN
  iptables -w -t nat -A cowbbonding -m conntrack --ctstate ESTABLISHED,RELATED -j RETURN 2>/dev/null
  iptables -w -t nat -A cowbbonding -j DNAT --to-destination 127.0.0.1 2>/dev/null
}

post_arphold() {
 [ "$arphold" == 1 ] || return
 [ "$work_mode" == "2" -o "$work_mode" == "3" ] || return
 [ "$(arptables -w -L cowbbonding 2>/dev/null|grep -c 'RETURN')" -gt 0 ] || return
 [ "$whitelistenabled" == 1 ] && arptables -w -A cowbbonding -i ${interface} -j DROP >/dev/null 2>&1
}

start_instance() {
	procd_open_instance
	procd_set_param command /etc/cowbbonding.sh
	procd_set_param respawn
	procd_set_param stderr 1
	procd_close_instance
}

start_service() {
 [ -f /var/lock/cowbbonding ] && exit 0
 [ -d /tmp/cowbbonding ] && stop_service
 enabled=`uci get cowbbonding.cowbbonding.enabled 2>/dev/null`
 if [ -s /etc/cowbbonding/list.cfg ] && [ "$enabled" == 1 ]; then
   touch /var/lock/cowbbonding
   [ -d /tmp/cowbbonding ] && { arptables -F INPUT 2>/dev/null ; rm -f /tmp/cowbbonding/* /tmp/log/COWB_BND_SUM 2>/dev/null ; } || mkdir /tmp/cowbbonding
   touch /tmp/cowbbonding/dhcp /tmp/cowbbonding/list.added /tmp/cowbbonding/list.cfg_org /tmp/log/COWB_BND_SUM
   cp -f /etc/cowbbonding/list.cfg /tmp/cowbbonding/list.cfg
   echo "" >> /tmp/cowbbonding/list.cfg
   work_mode=`uci get cowbbonding.cowbbonding.work_mode 2>/dev/null` || work_mode=1
   interface=`uci get cowbbonding.cowbbonding.interface 2>/dev/null` || interface=br-lan
   leasetime=`uci get cowbbonding.cowbbonding.leasetime 2>/dev/null` || leasetime="infinite"
   arphold=`uci get cowbbonding.cowbbonding.arphold 2>/dev/null` || arphold=0
   whitelistenabled=`uci get cowbbonding.cowbbonding.macwhitelist 2>/dev/null` || whitelistenabled=0
   lanmacaddr=`ifconfig br-lan | grep 'encap:Ethernet'| egrep -o '([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}'`
   lanipaddr=`ifconfig br-lan | egrep -o "addr:(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])"|awk -F ':' '{print $2}'`
   [ "$work_mode" == 1 -a "$whitelistenabled" != 1 ] && uci set cowbbonding.cowbbonding.enabled=0 && uci commit cowbbonding
   ERR=`echo "$leasetime"|sed 's/\t*/\n/g'|sed '/^\s*$/d'|egrep -v "([dhinfinite]|[0-9])"|wc -l` ; [ -z "$leasetime" -o "$leasetime" = "0" -o "$ERR" -gt 0 ] && leasetime="infinite"
   manual_add
   pre_arphold
   pre_white
   flush_dhcp
   flush_arp
   smart_mode
   guest_network
   post_arphold
   post_white
   ORG=`cat /tmp/cowbbonding/list.cfg_org 2>/dev/null|sed '/^\s*$/d'|wc -l`
   BND=`echo "$BND" | tee /tmp/log/COWB_BND_SUM`
   [ "$REPmac" -gt 0 ] && ERR1=`echo "有"$REPmac"条MAC重复，已丢弃！！！"`
   [ "$REPip" -gt 0 ] && ERR2=`echo "有"$REPip"条IP重复，须修正！！！"`
   [ "$ERRMAC" == 1 ] && ERR3=`echo "有错误MAC，须修正！！！"`
   [ "$ERRIP" == 1 ] && ERR4=`echo "有错误IP，须修正！！！"`
   echo "# >>>>>>>>>> $(date +"%Y-%m-%d %H:%M:%S") 共有条目："$ORG" ，已绑定："$BND" 。"$ERR1""$ERR2""$ERR3""$ERR4" <<<<<<<<<< #" >> /tmp/cowbbonding/list.cfg_ex
   echo "" >> /tmp/cowbbonding/list.cfg_ex
   cat /tmp/cowbbonding/list.cfg_ |sed 's/ *$//g'|sed 's/[ ][ ]*/   /g' >> /tmp/cowbbonding/list.cfg_ex
   OK3=`cat /tmp/cowbbonding/list.cfg_ 2>/dev/null|sed '/^\s*$/d'|wc -l`
   OK4=`cat /tmp/cowbbonding/list.cfg_ex 2>/dev/null|sed '/^'[#!/]'/d'|sed '/^\s*$/d'|wc -l`
   [ "$OK3" -gt 0 -a "$OK4" -gt 0 ] && cp -f /tmp/cowbbonding/list.cfg_ex  /etc/cowbbonding/list.cfg
   OK2=`cat /etc/cowbbonding/list.cfg 2>/dev/null|sed '/^'[#!/]'/d'|sed '/^\s*$/d'|wc -l`
   [ "$OK2" -gt 0 ] || cp -f /tmp/cowbbonding/list.cfg /etc/cowbbonding/list.cfg
   OK1=`cat /tmp/cowbbonding/dhcp|sed '/^\s*$/d'|wc -l` 
   [ "$reload" != "reload" ] && { [ "$OK1" -gt 5 ] && cat /tmp/cowbbonding/dhcp >> /etc/config/dhcp && /etc/init.d/dnsmasq reload 2>/dev/null ; }
   [ "$whitelistenabled" == 1 ] && start_instance
   rm -f /var/lock/cowbbonding /tmp/cowbbonding/* 2>/dev/null
 fi
}

service_triggers() {
   procd_add_reload_trigger 'cowbbonding'
}

stop_service() {
#  kill -9 $(busybox ps -w | grep 'arp_err_log' | grep -v 'grep' | awk '{print $1}') 2>/dev/null
   arptables -w -D INPUT -j cowbbonding 2>/dev/null
   arptables -w -F cowbbonding 2>/dev/null
   arptables -w -X cowbbonding 2>/dev/null
   iptables -w -t nat -D PREROUTING -j cowbbonding 2>/dev/null
   iptables -w -t nat -F cowbbonding 2>/dev/null
   iptables -w -t nat -X cowbbonding 2>/dev/null
   rm -rf /tmp/cowbbonding 2>/dev/null
   rm -f /tmp/log/COWB_BND_SUM 2>/dev/null
}

restart() {
   stop_service
   start_service
}

